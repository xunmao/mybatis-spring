<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xunmao.demo.dao.ActorMapper">

  <!-- 
    id 在命名空间中唯一的标识符，可以被用来引用这条语句。
    （xunmao）可以理解为Mapper类中的方法名。
   -->
  <!-- 
    resultType 期望从这条语句中返回结果的类全限定名或别名。
    注意，如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身的类型。
    resultType 和 resultMap 之间只能同时使用一个。
   -->
  <select id="listActors" resultType="com.xunmao.demo.pojo.Actor">
    SELECT
        actor_id,
        first_name,
        last_name,
        last_update
    FROM
        actor
  </select>

  <!-- 
    （xunmao）这里省略了参数类型 map。
    参数 map 中包含两个元素，它们的 key 分别是： startIndex 和 pageSize。
    XML 文件通过上述 key 可以取到相应的值。
   -->
  <select id="listActorsWithLimit" resultType="com.xunmao.demo.pojo.Actor">
    SELECT
        actor_id,
        first_name,
        last_name,
        last_update
    FROM
        actor
    LIMIT
        #{startIndex}, #{pageSize}
  </select>

  <select id="listActorsByLastNameLike" resultType="com.xunmao.demo.pojo.Actor">
    SELECT
        actor_id,
        first_name,
        last_name,
        last_update
    FROM
        actor
    WHERE
        last_name LIKE #{value}
  </select>

  <select id="listActorsLike" resultType="com.xunmao.demo.pojo.Actor">
    SELECT
        actor_id,
        first_name,
        last_name,
        last_update
    FROM
        actor
    <where>
      <if test="firstName != null">
        first_name LIKE #{firstName}
      </if>
      <if test="lastName != null">
        AND last_name LIKE #{lastName}
      </if>
    </where>
    <if test="firstName == null and lastName == null">
      LIMIT 0, 5
    </if>
  </select>

  <!-- 
    parameterType 将会传入这条语句的参数的类全限定名或别名。
    这个属性是可选的，因为 MyBatis 可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。
    （xunmao）这里省略了参数 id 的 parameterType。
   -->
  <!-- 
    默认情况下，使用 #{} 参数语法时，MyBatis 会创建 PreparedStatement 参数占位符，并通过占位符安全地设置参数（就像使用 ? 一样）。
    这样做更安全，更迅速，通常也是首选做法，不过有时你就是想直接在 SQL 语句中直接插入一个不转义的字符串。
    比如 ORDER BY 子句，这时候你可以 ORDER BY #{columnName} 。这样，MyBatis 就不会修改或转义该字符串了。
    https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#字符串替换
   -->
  <select id="findActorById" resultType="com.xunmao.demo.pojo.Actor">
    SELECT
        actor_id,
        first_name,
        last_name,
        last_update
    FROM
        actor
    WHERE
        actor_id = #{actorId}
  </select>

  <insert id="addActor" parameterType="com.xunmao.demo.pojo.Actor">
    INSERT INTO
        actor (actor_id, first_name, last_name, last_update)
    VALUES
        (
            #{actorId}, #{firstName}, #{lastName}, #{lastUpdate}
        )
  </insert>

  <update id="updateActor" parameterType="com.xunmao.demo.pojo.Actor">
    UPDATE
        actor
    SET
        first_name = #{firstName}, last_name = #{lastName}, last_update = #{lastUpdate}
    WHERE
        actor_id = #{actorId}
  </update>

  <update id="updateActorWithMap" parameterType="com.xunmao.demo.pojo.Actor">
    UPDATE
        actor
    <set>
      <if test="firstName != null">first_name = #{firstName},</if>
      <if test="lastName != null">last_name = #{lastName},</if>
      <if test="lastUpdate != null"> last_update = #{lastUpdate}</if>
    </set>
    WHERE
        actor_id = #{actorId}
  </update>

  <delete id="deleteActor">
    DELETE FROM
        actor
    WHERE
        actor_id = #{actorId}
  </delete>

</mapper>